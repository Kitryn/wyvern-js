public {{this.name}} = {
    async sendTransactionAsync(
    {{> typed_params inputs=inputs}}
    {{#this.payable}}
        txData: Partial<TxDataPayable> = {},
    {{/this.payable}}
    {{^this.payable}}
        txData: Partial<TxData> = {},
    {{/this.payable}}
    ): Promise<TransactionResponse> {
        const self = this as {{contractName}}Contract;
        const txDataWithDefaults = await self.applyDefaultsToTxDataAsync(txData);

        const txResponse: TransactionResponse = await self.ethersContractInstance.{{this.name}}(
            {{> params inputs=inputs}} 
            txDataWithDefaults
        )
        
        return txResponse;
    },
    async estimateGasAsync(
    {{> typed_params inputs=inputs}}
        txData: Partial<TxData> = {},
    ): Promise<BigNumber> {
        const self = this as {{contractName}}Contract;
        const txDataWithDefaults = await self.applyDefaultsToTxDataAsync(
            txData,
        );
        const gas: ethersBN = await self.ethersContractInstance.estimateGas.{{this.name}}(
            {{> params inputs=inputs}} 
            txDataWithDefaults
        );
        return new BigNumber(gas.toString());
    },
    getABIEncodedTransactionData(
    {{> typed_params inputs=inputs}}
    ): string {
        const self = this as {{contractName}}Contract;

        const abiEncodedTransactionData = self.ethersContractInstance.interface.encodeFunctionData("{{this.name}}", [
            {{> params inputs=inputs}}
        ])
        return abiEncodedTransactionData;
    },
};
